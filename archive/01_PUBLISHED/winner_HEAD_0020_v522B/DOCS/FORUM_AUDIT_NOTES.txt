# K4 Solution - Independent Verification Instructions
# Generated: 2025-01-09

This document provides multiple independent verification methods for the K4 solution,
addressing common concerns about AI-generated code and mathematical validity.

## Quick Verification (No Setup Required)

Download and run the minimal re-deriver (pure Python, zero dependencies):

```bash
# Get the minimal verifier
curl -O https://raw.githubusercontent.com/aviswerdlow/k4/main/01_PUBLISHED/winner_HEAD_0020_v522B/rederive_min.py

# Get the proof and ciphertext
curl -O https://raw.githubusercontent.com/aviswerdlow/k4/main/01_PUBLISHED/winner_HEAD_0020_v522B/proof_digest_enhanced.json
curl -O https://raw.githubusercontent.com/aviswerdlow/k4/main/02_DATA/ciphertext_97.txt

# Run verification
python3 rederive_min.py --ct ciphertext_97.txt --proof proof_digest_enhanced.json --out result.txt

# Check SHA-256 (should match: 4eceb739ab655d6f4ec87753569b8bf04573fe26d01c0caa68d36776dd052d79)
shasum -a 256 result.txt
```

## Understanding the Math

See how any character is decrypted (example: index 80):

```bash
python3 rederive_min.py --ct ciphertext_97.txt --proof proof_digest_enhanced.json --explain 80
```

Output shows the complete calculation:
```
Index 80:
  Class: 2
  Family: beaufort
  Period (L): 17
  Phase: 0
  Slot: 12 = (80 - 0) % 17
  Key residue (K): 7
  Ciphertext (C): T = 19
  Decrypt: P = K - C = 7 - 19 = 14 (mod 26)
  Plaintext: O
```

## Key Technical Points

1. **Six-track classing**: class(i) = ((i % 2) * 3) + (i % 3)
   - Creates 6 interleaved periodic tracks (0,1,2,3,4,5)
   - Each track has its own cipher family and wheel

2. **Three cipher families**:
   - Vigenère: P = C - K (mod 26)
   - Beaufort: P = K - C (mod 26)
   - Variant-Beaufort: P = C + K (mod 26)

3. **Anchor constraints**:
   - EAST (21-24), NORTHEAST (25-33), BERLIN (63-68), CLOCK (69-73)
   - These fix 24 of 97 positions directly (with L=17, each slot appears once)
   - The tail (22 positions) helps complete the remaining slots

4. **No mocks or placeholders**:
   - CI/CD verifies zero mock objects in code
   - All operations use real cryptographic math
   - See: .github/workflows/no-mocks-scan.yml

## Hand Verification Pack

Download HAND_PACK.zip for manual verification:
- SHA-256: 78eec53819f685b6963ccac6ca14de6058d55be98da1c118cb2fdb74fa81f7a6
- Contains: ciphertext, proof JSON, re-deriver, hand examples
- Includes LETTER_NUMBER_TABLE.txt for paper calculations

## Algebraic Proofs

### Wheel Emergence from Anchors
Run: `python3 07_TOOLS/rebuild_from_anchors.py` (main tool)
Or: `cd 04_EXPERIMENTS/core_hardening/rebuild_from_anchors && python3 run.py` (runner)
- Shows wheels are derived from constraints, not pre-encoded
- 24 wheel positions determined by anchors alone
- 73 positions undetermined without tail
- Main tool: 07_TOOLS/rebuild_from_anchors.py
- Runner: 04_EXPERIMENTS/core_hardening/rebuild_from_anchors/run.py

### Core Hardening Results
- **Skeleton uniqueness**: Only baseline class formula works (1/200+)
- **Tail necessity**: 0/550 mutations feasible
- **Anchor exactness**: 0/27 perturbations feasible
- All results in: 04_EXPERIMENTS/core_hardening_v3/

## Repository Structure

Key verification files:
- 01_PUBLISHED/winner_HEAD_0020_v522B/rederive_min.py - Minimal verifier
- 01_PUBLISHED/winner_HEAD_0020_v522B/proof_digest_enhanced.json - Wheel specs
- 01_PUBLISHED/winner_HEAD_0020_v522B/HAND_DERIVATION_80-84.txt - Worked examples
- 02_DATA/ciphertext_97.txt - Original K4 ciphertext
- .github/workflows/no-mocks-scan.yml - No-mocks CI verification

## Common Questions

Q: Is this AI-generated code?
A: The solution uses mathematical derivation. The minimal verifier (rederive_min.py) 
   is pure Python with no external dependencies - you can audit all 200 lines.

Q: Are the wheels just a lookup table?
A: No. Run `python3 07_TOOLS/rebuild_from_anchors.py` to see wheels emerge from anchor constraints.
   The wheels are algebraically forced by the ciphertext and plaintext anchors.

Q: Why 73 undetermined positions with anchors alone?
A: With L=17, each slot appears at most once in 97 positions. Four anchors
   force 24 unique slots, leaving 73 positions undetermined without the tail.

Q: Can I verify by hand?
A: Yes. See HAND_DERIVATION_80-84.txt for complete worked examples.
   Use LETTER_NUMBER_TABLE.txt for A=0..Z=25 conversions.

## Contact

Repository: https://github.com/aviswerdlow/k4
Solution date: September 2025
Method: Anchors → six-track wheels → algebraic derivation

---
End of verification instructions